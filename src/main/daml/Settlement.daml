-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Settlement where

import Bond
import Cash
import Dvp
import DvpTerms

import DA.Action
import DA.Date
import DA.Time
import Daml.Script

data AllocateCashResult = AllocateCashResult
  with
    restCid : Optional CashId
    dvpAllocatedCids : [DvpAllocatedId]

data SettlementResult = SettlementResult
  with
    restCid : Optional BondId
    settleResults : [SettleResult]

type SettlementProcessorId = ContractId SettlementProcessor

template SettlementProcessor
  with
    party : Party
  where
    signatory party

    controller party can

      nonconsuming AllocateCash : AllocateCashResult
        with
          cashCids : [CashId]
          dvpCids : [DvpId]
        do
          time <- getTime

          let allocateDvp (dvpCid : DvpId) (prev : AllocateCashResult) = do
              dvp <- fetch dvpCid
              assertMsg "party isn't buyer" $ dvp.c.buyer == party
              assertMsg "settlment time is in the future" $ dvp.c.settleTime <= time
              cashCid <- optional (fail "insufficient cash") pure prev.restCid
              r <- cashSplitMay party cashCid dvp.c.cashAmount
              allocated <- exercise dvpCid Allocate with cashCid = fst r
              return AllocateCashResult with restCid = snd r; dvpAllocatedCids = (fst allocated) :: prev.dvpAllocatedCids

          cashCid <- foldl1A (\cid otherCid -> exercise cid Cash.Merge with otherCid) cashCids
          foldrA allocateDvp (AllocateCashResult with restCid = Some cashCid; dvpAllocatedCids = []) dvpCids

      nonconsuming SettleMany : SettlementResult
        with
          bondCids : [BondId]
          dvpAllocatedCids : [DvpAllocatedId]
        do
          time <- getTime

          let someDate = date 2018 May 14
              settleDvp (dvpAllocatedCid: DvpAllocatedId) (prev: SettlementResult) = do
              dvpAllocated <- fetch dvpAllocatedCid
              assertMsg "settlement time is in the future" $ dvpAllocated.c.settleTime <= time
              assertMsg "party isn't seller" $ dvpAllocated.c.seller == party
              bondCid <- optional (fail "insufficient bonds") pure prev.restCid
              r <- bondSplitMay party bondCid dvpAllocated.c.bondAmount
              settleResult <- exercise dvpAllocatedCid Settle with bondCid = fst r
              return SettlementResult with restCid = snd r; settleResults = settleResult :: prev.settleResults

          bondCid <- foldl1A (\cid otherCid -> exercise cid Bond.Merge with otherCid) bondCids
          foldrA settleDvp (SettlementResult with restCid = Some bondCid; settleResults = []) dvpAllocatedCids

main = script do
  acmeBank <- allocateParty "Acme Bank"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  now <- setTime (time (date 2018 May 14) 0 0 0)

  cashAlice1Cid <- submit acmeBank do
    createCmd CashTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = alice
      currency = "USD"
      amount = 60.0
      locker = acmeBank
      lockMaturity = None

  cashAlice2Cid <- submit acmeBank do
    createCmd CashTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = alice
      currency = "USD"
      amount = 40.0
      locker = acmeBank
      lockMaturity = None

  cashAlice1Cid <- submit alice do exerciseCmd cashAlice1Cid Cash.Accept
  cashAlice2Cid <- submit alice do exerciseCmd cashAlice2Cid Cash.Accept

  bondBob1Cid <- submit acmeBank do
    createCmd BondTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = bob
      isin = "1234"
      amount = 60.0

  bondBob2Cid <- submit acmeBank do
    createCmd BondTransferRequest with
      issuer = acmeBank
      owner = acmeBank
      newOwner = bob
      isin = "1234"
      amount = 40.0

  bondBob1Cid <- submit bob do exerciseCmd bondBob1Cid Bond.Accept
  bondBob2Cid <- submit bob do exerciseCmd bondBob2Cid Bond.Accept

  dvp1Cid <- submit alice do
    createCmd DvpProposal with
      c = DvpTerms with
        buyer = alice
        seller = bob
        bondIssuer = acmeBank
        bondIsin = "1234"
        bondAmount = 50.0
        cashIssuer = acmeBank
        cashCurrency = "USD"
        cashAmount = 50.0
        settleTime = datetime 2018 May 16 0 0 0
        dvpId = "abc"

  dvp2Cid <- submit alice do
    createCmd DvpProposal with
      c = DvpTerms with
        buyer = alice
        seller = bob
        bondIssuer = acmeBank
        bondIsin = "1234"
        bondAmount = 20.0
        cashIssuer = acmeBank
        cashCurrency = "USD"
        cashAmount = 20.0
        settleTime = datetime 2018 May 16 0 0 0
        dvpId = "abc"

  dvp1Cid <- submit bob do exerciseCmd dvp1Cid Dvp.Accept
  dvp2Cid <- submit bob do exerciseCmd dvp2Cid Dvp.Accept

  processorAliceCid <- submit alice do createCmd SettlementProcessor with party = alice
  processorBobCid <- submit bob do createCmd SettlementProcessor with party = bob

  setTime (time (date 2018 May 16) 0 0 0)

  r <- submit alice do
      exerciseCmd processorAliceCid AllocateCash with
          cashCids = [ cashAlice1Cid, cashAlice2Cid ]
          dvpCids = [ dvp1Cid, dvp2Cid ]

  Some c <- optional (fail "unexpected rest") (queryContractId alice) r.restCid
  assert $ c.issuer == acmeBank
  assert $ c.owner == alice
  assert $ c.currency == "USD"
  assert $ c.amount == 30.0

  r <- submit bob do
      exerciseCmd processorBobCid SettleMany with
          bondCids = [ bondBob1Cid, bondBob2Cid ]
          dvpAllocatedCids = r.dvpAllocatedCids

  Some c <- optional (fail "unexpected rest") (queryContractId bob) r.restCid
  assert $ c.issuer == acmeBank
  assert $ c.owner == bob
  assert $ c.isin == "1234"
  assert $ c.amount == 30.0

  let settleResults = r.settleResults

  r <- submit alice do
      exerciseCmd processorAliceCid SettleMany with
        bondCids = map (\r -> r.bondCid) settleResults
        dvpAllocatedCids = []

  Some c <- optional (fail "unexpected rest") (queryContractId alice) r.restCid
  assert $ c.issuer == acmeBank
  assert $ c.owner == alice
  assert $ c.isin == "1234"
  assert $ c.amount == 70.0

  r <- submit bob do
      exerciseCmd processorBobCid AllocateCash with
        cashCids = map (\r -> r.cashCid) settleResults
        dvpCids = []

  Some c <- optional (fail "unexpected rest") (queryContractId bob) r.restCid
  assert $ c.issuer == acmeBank
  assert $ c.owner == bob
  assert $ c.currency == "USD"
  assert $ c.amount == 70.0
